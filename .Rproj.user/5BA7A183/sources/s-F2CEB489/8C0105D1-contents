#-------------------------------------------------------------------
# Update Date: 03/20/2020
# Create Date: 03/20/2020
# Goal: extract the UK Biobank PLINK file for the particular trait
#
# Author: Jin Jin
# Email: jjin31@jhu.edu
#-------------------------------------------------------------------
library(readr)
library(data.table)
library(mvtnorm)
library(devtools)
library(lavaan)
library(gdata)
library(xtable)
library(MASS) # for the ginv
library(data.table)
library(corpcor) #for pseudoinverse
library(parallel)
library(MendelianRandomization) # for mr_ivw
library(dplyr)
library(hipo)
library(R.utils) # for gzip
library(stringr) # for str_detect
library(bigreadr)

eth <- c("EA","AA")
for (i in 1:length(eth)){
  pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i],"/geno/")
  if (!dir.exists(pathname)){dir.create(pathname)}
  pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i],"/pheno/")
  if (!dir.exists(pathname)){dir.create(pathname)}
  pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i],"/gwastempout")
  if (!dir.exists(pathname)){dir.create(pathname)}
  pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i],"/sumdata")
  if (!dir.exists(pathname)){dir.create(pathname)}
  #pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i],"/ldclump/")
  #if (!dir.exists(pathname)){dir.create(pathname)}
  pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i],"/ldpredout/")
  if (!dir.exists(pathname)){dir.create(pathname)}
  pathname = paste0('/dcl01/chatterj/data/jin/prs/ARIC/',eth[i],'/prs_validation/')
  if (!dir.exists(pathname)){dir.create(pathname)}
  # --- phenotype data
  pathname = paste0('/dcl01/chatterj/data/jin/prs/ARIC/',eth[i],'/pheno/')
  if (!dir.exists(pathname)){dir.create(pathname)}
  # new
  pathname = paste0('/dcl01/chatterj/data/jin/prs/ARIC/', eth[i], '/ldpredout/mega/')
  if (!dir.exists(pathname)){dir.create(pathname)}
  pathname = paste0("/dcl01/chatterj/data/jin/prs/ARIC/",eth[i], "/geno/mega/")
  if (!dir.exists(pathname)){dir.create(pathname)}
}


#### complete HAP3+MEGA list:
hm3rsid = read.table('/dcl01/chatterj/data/yzhang/Data_ldscore/eur_w_ld_chr/w_hm3.snplist',header=T)
hm3rsid = as.character(hm3rsid[,1])
a=read.table('/dcl01/chatterj/data/jin/MEGA/megarsid.txt',header=F)
megasnplist = as.character(a[,1])
combinedsnplist = union(hm3rsid, megasnplist) # all unique
combinedsnplist = data.frame(snp = combinedsnplist)
write_delim(combinedsnplist, paste0("/dcl01/chatterj/data/jin/MEGA/mega-hm3-rsid.txt"), delim='\t',col_names = F)

###### SNPs in CKDGEN+ARIC:



# load mega snp list:
megasnp = bigreadr::fread2(paste0("/dcl01/chatterj/data/jin/MEGA/mega-hm3-rsid.txt"))
megasnp = as.character(megasnp[,1])

# --------------------- summary data ---------------------
#-------------------------------------------------------
# eGFR - EA - excluding ARIC
#-------------------------------------------------------
library(readr)
trait = 'eGFRcr'
race = 'EUR'
tem = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-all.txt'))
tem = tem[tem$MARKER %in% megasnp,]
tem = tem[complete.cases(tem),] # note:

if (T == F){
  # MARKER	OTHERALLELE	EFFECTALLELE	BETA	EAF	N	P	SE	Z	NSTUDIES	DIRECTION	LP	QHET	QHETP	I2HET
  # rs7899632	A	G	-0.000531868783788764	0.4356	558406	0.2035292883725	0.000418280331966271	-1.27156058542971	84	-------++--+---++--++++++-+++-++-+--+--+----+-++-+++--+-+--+----++-++++-+-++-++--++-+	0.691373085881941	96.2540988727713	0.151581743075746	13.7699059343858
  # missing chr info:
  aric.gwas = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/summary_data/ARIC-EA-eGFRcr-GWAS.txt'))
  aric.gwas = aric.gwas[complete.cases(aric.gwas),]
  # te = aric.gwas$MARKER_ID
  # temp = sapply(1:nrow(aric.gwas),function(x){strsplit(te[x],"_")[[1]][3]})

  tt = as.data.table(aric.gwas)
  tmp <- tt[, list(name = unlist(strsplit(MARKER_ID, '_'))), by = MARKER_ID]
  tmp = as.data.frame(tmp)
  tmpl = str_detect(tmp[,2],'rs')
  tmp0 = tmp[tmpl,]
  tmp00 = tmp0[!duplicated(tmp0[,2]),]

  aric.gwas = merge(tmp00,aric.gwas,by='MARKER_ID')
  aric.gwas$MARKER = temp
  additionalinfo = aric.gwas[,c('MARKER','#CHROM','BEGIN')]
  tem = merge(tem, additionalinfo, by ='MARKER')
  tem = as.data.frame(tem)
  tem$Freq1 = 1 - tem$EAF
}
tem$SE = sqrt(tem$s2)
tem = tem[,c(paste0(c('CHR', 'POS'),'.ckdgen'), 'MARKER', paste0(c('EFFECTALLELE', 'OTHERALLELE'),'.ckdgen'), 'EAF', 'p2', 'b2', 'SE', 'N')]
colnames(tem) = c('CHR',	'POS',	'SNP_ID',	'REF',	'ALT',	'REF_FRQ',	'PVAL',	'BETA',	'SE',	'N')
fwrite2(tem, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
#write_delim(tem, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'), delim=' ')
# rsid list by chr - this will be updated later !!!!!!



######### did not update during the last step
a = tem#bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
for (chr in 1:22){
  tem = a$SNP_ID[a$CHR == chr]
  snplist = data.frame(snp = tem)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.mega.txt'), delim='\t',col_names = F)
  print(chr)
}
snplist = data.frame(snp = a$SNP_ID)
write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/allrsid.txt'), delim='\t',col_names = F)

#### -------- Mega + HapMap3 SNP:
#sumdata = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
#### -------- Common SNP:
# only take common SNPs:
sumdata = a
MAFthr = 0.01
sumdata1 = sumdata[((sumdata$REF_FRQ >= MAFthr)&(sumdata$REF_FRQ <= (1-MAFthr))),]
fwrite2(sumdata1, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted-MAF',MAFthr,'.txt'))
for (chr in 1:22){
  tem = sumdata1$SNP_ID[a$CHR == chr]
  snplist = data.frame(snp = tem)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.MAF',MAFthr,'.txt'), delim='\t',col_names = F)
  print(chr)
}

MAFthr = 0.05
sumdata1 = sumdata[((sumdata$REF_FRQ >= MAFthr)&(sumdata$REF_FRQ <= (1-MAFthr))),]
fwrite2(sumdata1, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted-MAF',MAFthr,'.txt'))
for (chr in 1:22){
  tem = sumdata1$SNP_ID[a$CHR == chr]
  snplist = data.frame(snp = tem)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.MAF',MAFthr,'.txt'), delim='\t',col_names = F)
  print(chr)
}

#### -------- HapMap3 SNP:
hm3rsid = bigreadr::fread2('/dcl01/chatterj/data/yzhang/Data_ldscore/eur_w_ld_chr/w_hm3.snplist')
hm3rsid = as.character(hm3rsid$SNP) # 1217311
sumdata1 = sumdata[sumdata$SNP_ID %in% hm3rsid,] # 1181562
fwrite2(sumdata1, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted-hapmap3.txt'))
# haven't run
# for (chr in 1:22){
#   tem = sumdata1$SNP_ID[a$CHR == chr]
#   snplist = data.frame(snp = tem)
#   write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.txt'), delim='\t',col_names = F)
#   print(chr)
# }







# load mega snp list:
megasnp = bigreadr::fread2(paste0("/dcl01/chatterj/data/jin/MEGA/mega-hm3-rsid.txt"))
megasnp = as.character(megasnp[,1])
# --------------------- summary data ---------------------
#-------------------------------------------------------
# eGFR - AA - excluding ARIC
#-------------------------------------------------------
library(readr)
trait = 'eGFRcr'
race = 'AFR'
tem = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-all.txt'))
tem = as.data.frame(tem)
tem = tem[complete.cases(tem),] # note:
tem = tem[,c('CHR.ckdgen',	'POS.ckdgen',	'MARKER',	'EFFECTALLELE.ckdgen', 'OTHERALLELE.ckdgen',	'EAF',	'p2',	'b2',	's2',	'N')]
tem = tem[tem$MARKER %in% megasnp,]
tem$s2 = sqrt(tem$s2)
colnames(tem) = c('CHR',	'POS',	'SNP_ID',	'REF',	'ALT',	'REF_FRQ',	'PVAL',	'BETA',	'SE',	'N')

#tem$Freq1 = 0.5
tem = tem[!duplicated(tem$SNP_ID),] # unique RSID
fwrite2(tem, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
# rsid list by chr - this will be updated later !!!!!!
a = tem
for (chr in 1:22){
  tem = a$SNP_ID[a$CHR == chr]
  snplist = data.frame(snp = tem)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.mega.txt'), delim='\t',col_names = F)
  print(chr)
}
snplist = data.frame(snp = a$SNP_ID)
write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/allrsid.txt'), delim='\t',col_names = F)


#### -------- Mega + HapMap3 SNP:
#sumdata = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
#### -------- Common SNP:
# only take common SNPs:
sumdata = a
MAFthr = 0.01
sumdata1 = sumdata[((sumdata$REF_FRQ >= MAFthr)&(sumdata$REF_FRQ <= (1-MAFthr))),]
fwrite2(sumdata1, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted-MAF',MAFthr,'.txt'))
for (chr in 1:22){
  tem = sumdata1$SNP_ID[a$CHR == chr]
  snplist = data.frame(snp = tem)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.MAF',MAFthr,'.txt'), delim='\t',col_names = F)
  print(chr)
}

MAFthr = 0.05
sumdata1 = sumdata[((sumdata$REF_FRQ >= MAFthr)&(sumdata$REF_FRQ <= (1-MAFthr))),]
fwrite2(sumdata1, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted-MAF',MAFthr,'.txt'))
for (chr in 1:22){
  tem = sumdata1$SNP_ID[a$CHR == chr]
  snplist = data.frame(snp = tem)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.MAF',MAFthr,'.txt'), delim='\t',col_names = F)
  print(chr)
}


#### -------- HapMap3 SNP:
hm3rsid = bigreadr::fread2('/dcl01/chatterj/data/yzhang/Data_ldscore/eur_w_ld_chr/w_hm3.snplist')
hm3rsid = as.character(hm3rsid$SNP) # 1217311
sumdata = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
sumdata = sumdata[sumdata$SNP_ID %in% hm3rsid,] # 1181562
fwrite(sumdata, file = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted-hapmap3.txt'))






#-------------------------------------------------------
# EA
#-------------------------------------------------------
###### clean rsid file for TOPMED
library(parallel)
library(readr)
bad.path = '/dcl01/chatterj/data/jin/ARIC/EA/mega/rsidfile/'
badout.path = '/dcl01/chatterj/data/jin/ARIC/EA/mega/cleanrsidfile/'
if (!dir.exists(bad.path)){dir.create(bad.path)}
if (!dir.exists(badout.path)){dir.create(badout.path)}
mega.rsid = list()
for (chr in 1:22)
{
  mega.rsid[[chr]] = read_delim(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.txt'),delim="\t")
}
filenames = list.files('/dcl01/chatterj/data/jin/ARIC/EA/1.2m_cleanID/rsidfile/')[-1] # total SNP: 230558537
idfile.chr = list()
tem=1
idfile.chr = posfile.chr = list()
for (chr in 1:22)
{
  idfile.chr[[chr]] = posfile.chr[[chr]] = numeric()
}
for (i in 1:length(filenames))
{
  rm(tem)
  tem = read_delim(paste0('/dcl01/chatterj/data/jin/ARIC/EA/1.2m_cleanID/rsidfile/',filenames[i]),delim='\t',col_names = F)
  chrinfo = unlist(mclapply(1:nrow(tem),function(x){substr(strsplit(tem[[1]][x],':')[[1]][1],4,100)},mc.cores=64))
  for (chr in 1:22)
  {
    temp = tem[(chrinfo == chr),]
    if (nrow(temp)>0)
    {
      temp = temp[(temp[[2]] %in% mega.rsid[[chr]][[1]]),]
      if (nrow(temp)>0)
      {
        dups = which(duplicated(temp[,1]))
        if (length(dups)>0)
        {
          temp = temp[-dups,]
        }
        if (nrow(temp) > 0)
        {
          idfile.chr[[chr]] = rbind(idfile.chr[[chr]],temp)
          posfile.chr[[chr]] = rbind(posfile.chr[[chr]],temp[1])
          write_delim(temp,paste0(badout.path,'id',chr,'-',i,'.txt'),delim='\t',col_names = F)
          write_delim(temp[1],paste0(badout.path,'pos',chr,'-',i,'.txt'),delim='\t',col_names = F)
        }
        a=ifelse(nrow(temp) == length(unique(temp[[1]])),1,0)
        print(paste0('unique: i=',i,' chr=',chr,' :',a))
      }
    }
  }
  save(idfile.chr,posfile.chr,file='/dcl01/chatterj/data/jin/ARIC/EA/mega/eur.idmatch.RData')
  print(paste0(i,' out of ',length(filenames)))
}

for (chr in 1:22)
{
  dup.ind = which(duplicated(idfile.chr[[chr]][[2]]))
  tem = idfile.chr[[chr]][-dup.ind,]
  write_delim(tem,paste0(badout.path,'id',chr,'.txt'),delim='\t',col_names = F)
  tem = posfile.chr[[chr]][-dup.ind,]
  write_delim(tem,paste0(badout.path,'pos',chr,'.txt'),delim='\t',col_names = F)
}
### check if the number matches
for (chr in 1:22)
{
  a = nrow(idfile.chr[[chr]])
  b = length(unique(idfile.chr[[chr]][[1]]))
  c = length(unique(idfile.chr[[chr]][[2]])) # rsid: not unique!!! need to use pos
  d = length(mega.rsid[[chr]][[1]])
  print(paste('chr: ',chr,' ',a,b,c,d))
}


# load('/dcl01/chatterj/data/jin/ARIC/EA/mega/idmatch.RData')
# a = unlist(sapply(1:22,function(x){idfile.chr[[x]][[2]]}))
# trait = 'eGFRcr'; race = 'EUR'
# sumstats.train = read_delim(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'),delim=' ')
# sumstats.train.qc = sumstats.train[sumstats.train$SNP_ID %in% a,]
# write_delim(sumstats.train.qc,paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.qc.txt'),delim=' ')
#-------------------------------------------------------
# 2. PLINK - JHPCE jobs
#rm(list=ls())
library(data.table)
temp <- commandArgs(TRUE)
chr  = as.numeric(temp[1])
trait = 'eGFRcr'
race = 'EUR'; population = 'EA'
rawgenotype.dir = paste0('/dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/',population,'/')
removeID.dir = paste0('/dcl01/chatterj/data/jin/collaboration/CKDPRS/data/validation/',trait,'-ARIC/')
rsid.path = paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/')
plinkout_path = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/')
plinkcode = paste(
  "/dcl01/chatterj/data/jin/software/plink",
  paste0("--vcf ", rawgenotype.dir,"chr",chr,".dose.vcf.gz"),
  paste0("--extract ", rsid.path, "pos",chr,".txt"),
  paste0("--make-bed"),
  paste0("--out ", plinkout_path, "chr", chr)
)
system(plinkcode)
print(chr)



##### generate chr{1..22}.txt
for (chr in 1:22){
  
}





#-------------------------------------------------------
##### 3. QC
#rm(list=ls())
library(data.table)
temp <- commandArgs(TRUE)
chr  = as.numeric(temp[1])
trait = 'eGFRcr'
population = 'EA'
removeID.dir = paste0('/dcl01/chatterj/data/jin/collaboration/CKDPRS/data/validation/',trait,'-ARIC/')
rsid.path = paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/')
plinkout_path = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/')
plinkcode = paste(
  "/dcl01/chatterj/data/jin/software/plink",
  paste0("--bfile ", plinkout_path, "chr", chr),
  paste0("--remove ",removeID.dir,"ID.remove.white.txt"),
  paste0("--update-name ",rsid.path,"id",chr,".txt 2 1"),
  paste0("--make-bed"),
  paste0("--out ", plinkout_path, "chr.qc", chr)
)
system(plinkcode)

##### 4. extract the overlapping SNPs for retraining model
# 1000G reference SNPs:
sumdat = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
refsnp = sumsnp = aricsnp = sharedsnp = list()
for (chr in 1:22){
  tem = bigreadr::fread2(paste0('/dcl01/chatterj/data/jzhang2/1000G/GRCh38/EUR/chr',chr,'.bim'))
  refsnp[[chr]] = as.character(tem[,2])
  sumsnp[[chr]] = sumdat$SNP_ID[sumdat$CHR == chr]
  tem2 = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr.qc',chr,'.bim'))
  aricsnp[[chr]] = as.character(tem2[,2])
  sharedsnp[[chr]] = intersect(intersect(refsnp[[chr]], sumsnp[[chr]]), aricsnp[[chr]])
  snplist = data.frame(snp = sharedsnp[[chr]])
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.txt'), delim='\t',col_names = F)
  print(chr)
}
snplist = data.frame(snp = unlist(sharedsnp))
write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/allrsid.txt'), delim='\t',col_names = F)















#-------------------------------------------------------
# AA
#-------------------------------------------------------
library(parallel)
library(readr)
trait = 'eGFRcr'; race = 'AFR'; eth = 'AA'
traits = c('eGFRcr','ACR','urate')
bad.path = paste0('/dcl01/chatterj/data/jin/ARIC/',eth,'/mega/rsidfile/')
badout.path = paste0('/dcl01/chatterj/data/jin/ARIC/',eth,'/mega/cleanrsidfile/')
if (!dir.exists(bad.path)){dir.create(bad.path)}
if (!dir.exists(badout.path)){dir.create(badout.path)}
mega.rsid = list()
for (chr in 1:22)
{
  mega.rsid[[chr]] = read_delim(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.txt'),delim='\t',col_names = F)
  mega.rsid[[chr]] = as.data.frame(mega.rsid[[chr]])
  print(chr)
}

# match pos and rsid:
for (chr in 1:21){
  system(paste0('cp -r /dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/AA/chr',chr,'.info.gz /dcl01/chatterj/data/jin/ARIC/AA/GWAS-TOPMED/'))
  system(paste0('gunzip /dcl01/chatterj/data/jin/ARIC/AA/GWAS-TOPMED/chr',chr,'.info.gz'))
}
chr = 22
system(paste0('cp -r /dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/AA/chr',chr,'.info /dcl01/chatterj/data/jin/ARIC/AA/GWAS-TOPMED/'))

sumdata1 = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',traits[1],'/',race,'/sumdata/training-GWAS-formatted.txt'))
sumdata2 = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',traits[2],'/',race,'/sumdata/training-GWAS-formatted.txt'))
sumdata3 = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',traits[3],'/',race,'/sumdata/training-GWAS-formatted.txt'))
sumdata2 = sumdata2[!(sumdata2$SNP_ID %in% sumdata1$SNP_ID),]
sumdata12 = rbind(sumdata1,sumdata2)
sumdata3 = sumdata3[!(sumdata3$SNP_ID %in% sumdata12$SNP_ID),]
sumdata = rbind(sumdata12,sumdata3)
sumdata = sumdata[,1:3]


for (chr in 1:22){
  a=bigreadr::fread2(paste0('/dcl01/chatterj/data/jzhang2/1000G/GRCh38/AFR/chr',chr,'.bim'))
  colnames(a) = c('chr','rsid','na','pos','a1','a2')
  tem = paste0('chr',a$chr,':',a$pos,':',a$a2,':',a$a1)
  #tem = paste0('chr',a$chr,':',a$pos)
  a$merge = tem
  a = a[!duplicated(a$merge),]
  #a = a[,c('merge','rsid')]
  #b=bigreadr::fread2(paste0('/dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/AA/chr',chr,'.info'))
  b=bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/ARIC/AA/GWAS-TOPMED/chr',chr,'.info'))
  
  #te = b$SNP
  #etc.topmed = sapply(1:length(te),function(x){strsplit(te[x],":")[[1]]})
  #tem = paste0(etc.topmed[1,],':',etc.topmed[2,])
  b$merge = b$SNP
  b = b[,c('SNP','merge','MAF','REF(0)','ALT(1)')]
  merge.geno = merge(a,b,by ='merge')
  # select the SNPs in mega snp list:
  #sum((merge.geno$a2==merge.geno$`REF(0)`)&(merge.geno$a1 == merge.geno$`ALT(1)`))
  sum(duplicated(merge.geno$rsid))
  c = sumdata[sumdata$CHR == chr,]
  #c$merge = paste0('chr',c$CHR,':',c$POS,':',c$ALT,':',c$REF)
  colnames(c)[3] = 'rsid'
  temp = merge(merge.geno, c, by = 'rsid')
  snplist = data.frame(snp = temp$SNP)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/pos',chr,'.txt'), delim='\t',col_names = F)
  snplist = data.frame(snp = temp$SNP, rsid = temp$rsid)
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/id',chr,'.txt'), delim='\t',col_names = F)
  print(chr)
}
#-------------------------------------------------------
# 2. PLINK - JHPCE jobs
rm(list=ls())
library(data.table)
temp <- commandArgs(TRUE)
chr  = as.numeric(temp[1])
trait = 'eGFRcr'
race = 'AFR'; population = 'AA'
rawgenotype.dir = paste0('/dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/',population,'/')
removeID.dir = paste0('/dcl01/chatterj/data/jin/collaboration/CKDPRS/data/validation/',trait,'-ARIC/')
rsid.path = paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/') # need to update!!!
plinkout_path = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/')
plinkcode = paste(
  "/dcl01/chatterj/data/jin/software/plink",
  paste0("--vcf ", rawgenotype.dir,"chr",chr,".dose.vcf.gz"),
  paste0("--extract ", rsid.path, "pos",chr,".txt"),
  paste0("--make-bed"),
  paste0("--out ", plinkout_path, "chr", chr)
)
system(plinkcode)
#-------------------------------------------------------
##### 3. QC
rm(list=ls())
library(data.table)
temp <- commandArgs(TRUE)
chr  = as.numeric(temp[1])
trait = 'eGFRcr'
race = 'AFR'; population = 'AA'
rawgenotype.dir = paste0('/dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/',population,'/')
removeID.dir = paste0('/dcl01/chatterj/data/jin/collaboration/CKDPRS/data/validation/',trait,'-ARIC/')
rsid.path = paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/')
plinkout_path = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/')
plinkcode = paste(
  "/dcl01/chatterj/data/jin/software/plink",
  paste0("--bfile ", plinkout_path, "chr", chr),
  paste0("--remove ",removeID.dir,"ID.remove.black.txt"),
  paste0("--update-name ",rsid.path,"id",chr,".txt 2 1"),
  paste0("--make-bed"),
  paste0("--out ", plinkout_path, "chr.qc", chr)
)
system(plinkcode)

##### 4. extract the overlapping SNPs for retraining model
# 1000G reference SNPs:
sumdat = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/training-GWAS-formatted.txt'))
refsnp = sumsnp = aricsnp = sharedsnp = list()
for (chr in 1:22){
  tem = bigreadr::fread2(paste0('/dcl01/chatterj/data/jzhang2/1000G/GRCh38/EUR/chr',chr,'.bim'))
  refsnp[[chr]] = as.character(tem[,2])
  sumsnp[[chr]] = sumdat$SNP_ID[sumdat$CHR == chr]
  tem2 = bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr.qc',chr,'.bim'))
  aricsnp[[chr]] = as.character(tem2[,2])
  sharedsnp[[chr]] = intersect(intersect(refsnp[[chr]], sumsnp[[chr]]), aricsnp[[chr]])
  snplist = data.frame(snp = sharedsnp[[chr]])
  write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/chr',chr,'.rsid.txt'), delim='\t',col_names = F)
  print(chr)
}
snplist = data.frame(snp = unlist(sharedsnp))
write_delim(snplist, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/allrsid.txt'), delim='\t',col_names = F)


# check consistency in genotype data
for (chr in 1:22){
  a=bigreadr::fread2(paste0('/dcl01/chatterj/data/jzhang2/1000G/GRCh38/',race,'/chr',chr,'.bim'))
  b=bigreadr::fread2(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/sumdata/chr.qc',chr,'.bim'))
  colnames(a)=c('CHR','SNP_ID','NA','POS','1000G.A1','1000G.A2')
  colnames(b)=c('CHR','SNP_ID','NA','POS','ARIC.A1','ARIC.A2')
  tem1 = merge(sumdat,a,by='SNP_ID')
  tem1.match=which((tem1$REF == tem1$`1000G.A1`) & (tem1$ALT == tem1$`1000G.A2`))
  tem1.flip=which((tem1$REF == tem1$`1000G.A2`) & (tem1$ALT == tem1$`1000G.A1`))
  # tem2 = merge(a,b,by='SNP_ID')
  # tem2.match=which((tem2$`ARIC.A1` == tem2$`1000G.A1`) & (tem2$`ARIC.A2` == tem2$`1000G.A2`))
  # tem2.flip=which((tem2$`ARIC.A1` == tem2$`1000G.A2`) & (tem2$`ARIC.A2` == tem2$`1000G.A1`))
}

tem1 = merge(sumdat,b,by='SNP_ID')
tem1.match=which((tem1$REF == tem1$`ARIC.A1`) & (tem1$ALT == tem1$`ARIC.A2`))
tem1.flip=which((tem1$REF == tem1$`ARIC.A2`) & (tem1$ALT == tem1$`ARIC.A1`))







# --------------------- finalize genotype data (no need to split tuning and validation individuals)
#-------------------------------------------------------
# EA & AA
#-------------------------------------------------------
rm(list=ls())
library(data.table)
temp <- commandArgs(TRUE)
chr  = as.numeric(temp[1])
races = c('EUR','AFR')
trait = 'eGFRcr'
race = races[as.numeric(temp[2])]


if (race == 'EUR') population = 'EA'
if (race == 'AFR') population = 'AA'
rawgenotype.dir = paste0('/dcs01/arking/ARIC_static/ARIC_Data/GWAS/TOPMed/',population,'/')
removeID.dir = paste0('/dcl01/chatterj/data/jin/collaboration/CKDPRS/data/validation/',trait,'-ARIC/')
rsid.path = paste0('/dcl01/chatterj/data/jin/ARIC/',population,'/mega/cleanrsidfile/')
plinkout_path = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/',race,'/geno/mega/')
# Create reference panel
for (chr in 1:22){
  plinkcode = paste(
    "/dcl01/chatterj/data/jin/software/plink",
    paste0('--bfile /dcl01/chatterj/data/jzhang2/1000G/GRCh38/',race,'/chr',chr),
    paste0('--extract ',plinkout_path,'chr',chr,'.rsid.txt'),
    paste0("--make-bed"),
    paste0("--out ", plinkout_path, "ref_chr", chr)
  )
  system(plinkcode)
  # clean ARIC genotype data
  plinkcode = paste(
    "/dcl01/chatterj/data/jin/software/plink",
    paste0("--bfile ", plinkout_path, "chr.qc", chr),
    paste0('--extract ',plinkout_path,'chr',chr,'.rsid.txt'),
    paste0("--make-bed"),
    paste0("--out ", plinkout_path, "chr.qc", chr)
  )
  system(plinkcode)
  print(paste0('Complete ',race,' chr ',chr))
}
# remove duplicated SNPs:
# EUR chr 5 rs12186596
for (chr in 5){
  plinkcode = paste(
    "/dcl01/chatterj/data/jin/software/plink",
    paste0('--bfile ',plinkout_path, "ref_chr", chr),
    paste0('--exclude ',plinkout_path,'duplicated.rsid.txt'),
    paste0("--make-bed"),
    paste0("--out ", plinkout_path, "ref_chr", chr)
  )
  system(plinkcode)
  # clean ARIC genotype data
  plinkcode = paste(
    "/dcl01/chatterj/data/jin/software/plink",
    paste0("--bfile ", plinkout_path, "chr.qc", chr),
    paste0('--exclude ',plinkout_path,'duplicated.rsid.txt'),
    paste0("--make-bed"),
    paste0("--out ", plinkout_path, "chr.qc", chr)
  )
  system(plinkcode)
  print(paste0('Complete ',race,' chr ',chr))
}



# ---------------- generate reference panel using PLINK2 instead
rm(list=ls())
library(data.table)
temp <- commandArgs(TRUE)
#chr  = as.numeric(temp[1])
races = c('EUR','AFR')
trait = 'eGFRcr'
race = 'AFR' #races[as.numeric(temp[2])]

plinkout_path = paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/1KGref/',race,'/')
if (!dir.exists(plinkout_path)){dir.create(plinkout_path)}

# Create reference panel
for (chr in 1:22){
  plinkcode = paste(
    "/dcl01/chatterj/data/jin/software/plink2",
    paste0('--bfile /dcl01/chatterj/data/jzhang2/1000G/GRCh38/',race,'/chr',chr),
    #paste0('--extract ',plinkout_path,'chr',chr,'.rsid.txt'),
    paste0('--extract /dcl01/chatterj/data/jin/MEGA/mega-hm3-rsid.txt'),
    paste0("--make-bed"),
    paste0("--out ", plinkout_path, "ref_chr", chr)
  )
  system(plinkcode)
  print(paste0('Complete ',race,' chr ',chr))
}





# phenotype data from ARIC
# ------------------ eGFRcr EUR ------------------
validatetable = read.csv(paste0("/dcl01/chatterj/data/zyu/egfr_pc_withgwasid.csv"), header=T) # 15792
validatetable = as.data.frame(validatetable)
validatetable = validatetable[,c('egfrcr_v1','gwasid','age_v1','female','white',paste0('PC',1:10))]
colnames(validatetable) = c('y','id','age','sex','white',paste0('pc',1:10))
validatetable = validatetable[complete.cases(validatetable$y),]
validatetable$y = log(validatetable$y)
validatetable$id = as.character(validatetable$id)
validatetable = validatetable[complete.cases(validatetable),]
validatetable = validatetable[validatetable$white == 1,]

IDs = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/geno/mega/chr.qc22.fam'),header=F)
EUR.id = intersect(validatetable$id, IDs[,2]) # 9037
IDs = IDs[IDs[,2] %in% EUR.id,c(1,2),]
IDs[,1]=as.character(IDs[,1]); IDs[,2]=as.character(IDs[,2])

set.seed(2020)
ind = sample(1:length(EUR.id),3000)
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.validation.txt'), col_names = F)
validatetable = validatetable[validatetable$id %in% EUR.id,]
write_delim(validatetable, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/pheno.txt'),delim='\t')

###
set.seed(2020*2)
ind = sample(1:length(EUR.id),floor(length(EUR.id)/2))
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.validation.txt'), col_names = F)



# ------------------ eGFRcr AFR ------------------
validatetable = read.csv(paste0("/dcl01/chatterj/data/zyu/egfr_pc_AA_withgwasid.csv"), header = T)
names.cols = c('gwasid','white', 'female',as.vector(sapply(1,function(x){paste0(c('age_v','egfrcr_v'),x)})),
               paste0('PC',1:10))
validatetable = validatetable[complete.cases(validatetable[,names.cols]),names.cols]
colnames(validatetable) = c('id','white','female','age',trait,paste0('PC',1:10))
validatetable[['id']] = as.character(validatetable[['id']])
validatetable[['female']] = as.factor(validatetable[['female']])

IDs = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/geno/mega/chr.qc22.fam'),header=F)
AFR.id = intersect(validatetable$id, IDs[,2])
IDs = IDs[IDs[,2] %in% AFR.id,c(1,2)]
IDs[,1]=as.character(IDs[,1]); IDs[,2]=as.character(IDs[,2])
set.seed(2020)
ind = sample(1:length(AFR.id),1000)
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.validation.txt'), col_names = F)
validatetable = validatetable[validatetable$id %in% AFR.id,]
write_delim(validatetable, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/pheno.txt'),delim='\t')

###
set.seed(2020*2)
ind = sample(1:length(AFR.id),floor(length(AFR.id)/2))
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.validation.txt'), col_names = F)





# --------------- ACR ---------------
library(tidyverse)
library(haven)
trait = 'ACR'
acr <- read_dta(file = '/dcl01/chatterj/data/zyu/multiethnic_ckdgen/ARIC_pheno/derived_kidney_v1_to_v6.dta')
acr = as.data.frame(acr)
acr = acr[,c('id','acr_v4')]
acr = acr[complete.cases(acr),]

# ----- EUR
validatetable = read.csv(paste0("/dcl01/chatterj/data/zyu/egfr_pc_withgwasid.csv"), header=T) # 15792
validatetable = as.data.frame(validatetable)
validatetable = merge(validatetable,acr,by='id')
validatetable = validatetable[,c('acr_v4','gwasid','age_v1','female','white',paste0('PC',1:10))]
colnames(validatetable) = c('y','id','age','sex','white',paste0('pc',1:10))
validatetable = validatetable[complete.cases(validatetable$y),]
validatetable$y = log(validatetable$y)
validatetable$id = as.character(validatetable$id)
validatetable = validatetable[complete.cases(validatetable),]
a = validatetable[validatetable$white == 1,]
#validatetable = validatetable[validatetable$id %in% EUR.id,]
write_delim(a, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/pheno.txt'),delim='\t')


# ----- AFR
validatetable = read.csv(paste0("/dcl01/chatterj/data/zyu/egfr_pc_AA_withgwasid.csv"), header = T)
validatetable = merge(validatetable,acr,by='id')
names.cols = c('gwasid','white', 'female','age_v1','acr_v4', paste0('PC',1:10))
validatetable = validatetable[complete.cases(validatetable[,names.cols]),names.cols]
colnames(validatetable) = c('id','white','female','age',trait,paste0('PC',1:10))
validatetable[['id']] = as.character(validatetable[['id']])
validatetable[['female']] = as.factor(validatetable[['female']])
validatetable = validatetable[,c('ACR','id','age','female','white',paste0('PC',1:10))]
colnames(validatetable) = c('y','id','age','sex','white',paste0('pc',1:10))
validatetable = validatetable[complete.cases(validatetable$y),]
validatetable$y = log(validatetable$y)
write_delim(validatetable, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/pheno.txt'),delim='\t')


trait = 'ACR'
# EUR
IDs = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/pheno.txt'),header=T)
#IDs = IDs[,c('id')] # 7526
fids = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/eGFRcr/EUR/geno/mega/chr.qc22.fam'),header=F)
fids = fids[,1:2]
colnames(fids) = c('fid','id')
IDs = merge(fids,IDs,by='id') # 7240
IDs = IDs[,c(2,1)]
IDs[,1]=as.character(IDs[,1]); IDs[,2]=as.character(IDs[,2])
set.seed(2020*4)
ind = sample(1:nrow(IDs),floor(nrow(IDs)/2))
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.validation.txt'), col_names = F)

# AFR
IDs = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/pheno.txt'),header=T)
#IDs = IDs[,c('id')]
fids = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/eGFRcr/AFR/geno/mega/chr.qc22.fam'),header=F)
fids = fids[,1:2]
colnames(fids) = c('fid','id')
IDs = merge(fids,IDs,by='id') # 1950
IDs = IDs[,c(2,1)]
IDs[,1]=as.character(IDs[,1]); IDs[,2]=as.character(IDs[,2])
set.seed(2020*2)
ind = sample(1:nrow(IDs),floor(nrow(IDs)/2))
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.validation.txt'), col_names = F)




# --------------- URATE ---------------
library(tidyverse)
library(haven)
trait = 'urate'
urate <- read_dta(file = '/dcl01/chatterj/data/zyu/multiethnic_ckdgen/ARIC_pheno/chma.dta')
urate = as.data.frame(urate)
urate = urate[,c('id','chma15')]
urate = urate[complete.cases(urate),]

# ----- EUR
validatetable = read.csv(paste0("/dcl01/chatterj/data/zyu/egfr_pc_withgwasid.csv"), header=T) # 15792
validatetable = as.data.frame(validatetable)
validatetable = merge(validatetable,urate,by='id')
validatetable = validatetable[,c('chma15','gwasid','age_v1','female','white',paste0('PC',1:10))]
colnames(validatetable) = c('y','id','age','sex','white',paste0('pc',1:10))
validatetable = validatetable[complete.cases(validatetable$y),]
# validatetable$y = log(validatetable$y)
validatetable$id = as.character(validatetable$id)
validatetable = validatetable[complete.cases(validatetable),]
a = validatetable[validatetable$white == 1,]
#validatetable = validatetable[validatetable$id %in% EUR.id,]
write_delim(a, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/pheno.txt'),delim='\t')

# ----- AFR
validatetable = read.csv(paste0("/dcl01/chatterj/data/zyu/egfr_pc_AA_withgwasid.csv"), header = T)
validatetable = merge(validatetable,urate,by='id')
names.cols = c('gwasid','white', 'female','age_v1','chma15', paste0('PC',1:10))
validatetable = validatetable[complete.cases(validatetable[,names.cols]),names.cols]
colnames(validatetable) = c('id','white','female','age',trait,paste0('PC',1:10))
validatetable[['id']] = as.character(validatetable[['id']])
validatetable[['female']] = as.factor(validatetable[['female']])
validatetable = validatetable[,c('urate','id','age','female','white',paste0('PC',1:10))]
colnames(validatetable) = c('y','id','age','sex','white',paste0('pc',1:10))
validatetable = validatetable[complete.cases(validatetable$y),]
#validatetable$y = log(validatetable$y) # no need
write_delim(validatetable, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/pheno.txt'),delim='\t')


trait = 'urate'
# EUR
IDs = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/pheno.txt'),header=T)
#IDs = IDs[,c('id')] # 7527
fids = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/eGFRcr/EUR/geno/mega/chr.qc22.fam'),header=F)
fids = fids[,1:2]
colnames(fids) = c('fid','id')
IDs = merge(fids,IDs,by='id') # 9037
IDs = IDs[,c(2,1)]
IDs[,1]=as.character(IDs[,1]); IDs[,2]=as.character(IDs[,2])
set.seed(2020*4)
ind = sample(1:nrow(IDs),floor(nrow(IDs)/2))
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/EUR/pheno/IDs.validation.txt'), col_names = F)

# AFR
IDs = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/pheno.txt'),header=T)
#IDs = IDs[,c('id')] # 7527
fids = read.table(paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/eGFRcr/AFR/geno/mega/chr.qc22.fam'),header=F)
fids = fids[,1:2]
colnames(fids) = c('fid','id')
IDs = merge(fids,IDs,by='id') # 2791
IDs = IDs[,c(2,1)]
IDs[,1]=as.character(IDs[,1]); IDs[,2]=as.character(IDs[,2])
set.seed(2020*2)
ind = sample(1:nrow(IDs),floor(nrow(IDs)/2))
IDs.tune = IDs[ind,]
IDs.val = IDs[-ind,]
write_delim(IDs.tune, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.tuning.txt'), col_names = F)
write_delim(IDs.val, paste0('/dcl01/chatterj/data/jin/prs/realdata/ARIC/',trait,'/AFR/pheno/IDs.validation.txt'), col_names = F)






