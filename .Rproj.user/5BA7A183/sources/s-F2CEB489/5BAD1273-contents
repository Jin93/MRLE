# too significant

######### Data Preprocessing
####
BOOT = TRUE
correlation = T
adjust = F
ivwpackage = T
stage2.conduct = T
GWAS = FALSE
###############

K=5
traitvec = c('IL1','IL6','IL8','TNF','MCP1')
exposure = 'inflammation'
outcome = 'rhema'
sd.outcome = 1
N.biomarker = c(3309,8189,3526,3454,8293)[1:K]
names(N.biomarker) = traitvec
sd.biomarkers = c(2.47,49.9,10.5,147,24.8)[1:K]
names(sd.biomarkers) = traitvec
thetak.sign = c(1,1,1,1,1)[1:K]

multiplebiom = T
if (multiplebiom == T) {methods = c(paste0('IVW.',traitvec),paste0('MRMix.',traitvec),'GMM')}
if (multiplebiom == F) {methods = c('IVW','MRMix','GMM')}
setwd("~/mr/")
library(mvtnorm)
library(devtools)
library(lavaan)
library(gdata)
library(xtable)
library(MASS) # for the ginv
library(data.table)
library(corpcor) #for pseudoinverse
library(parallel)
library(MendelianRandomization) # for mr_ivw
library(dplyr)
library(readr)
library(R.utils) # for gzip
library(stringr) # for str_detect
library(genio) # a package to facilitate reading and writing genetics data. The focus of this vignette is processing plink BED/BIM/FAM files.
library(MRMix)
library(dplyr)
source("code/gmm_functions_datanalysis.R")
source("code/functions_inflammation.R")
ldsc.out.path="/dcl01/chatterj/data/jin/ldsc.out/"
ldsc.path = "/dcl01/chatterj/data/jin/ldsc/"
python.path = "~/anaconda2/bin/python" #cannot be default! change to anaconda2
ldscore.path = file.path(ldsc.path,"eur_w_ld_chr/") # default, does not need to be specified
gwas.dir = '/dcl01/chatterj/data/jin/summary_data/'
### for file transfer between local and cluster
mydir = '/dcl01/chatterj/data/jin/ldclump/'
refdir = '/dcl01/chatterj/data/diptavo/1KG/'
if (outcome == 'rhema') outcomedir = '/dcl01/chatterj/data/Rawdata-summarydata/Okada/'
#
iter.max = 5e2
type = "union"
alpha0 = 5e-2
z0 = qnorm(p=alpha0/2,lower.tail=FALSE)
#### filtering parameters
maf.thr = 0.01 #(default in function preprocess)
select.type = 'intersection'
p.clump = alpha = 5e-4
z = qnorm(p=alpha/2,lower.tail=FALSE)

####################################################################################################
##################################### Step 1: Data Preprocessing ###################################
######## Merge: match SNPs between biomarkers using rsid; ##########################################
######## Standardization of the biomarker data (/se(trait)) ########################################
######## SNP filtering for biomarkers:
############### 1. with MAF<0.01
############### 2. with effective sample size < 0.67 * 0.9 percentile
############### 3. within the major histocompatibility complex (MHC) region ( 26Mb \~ 34Mb on chromosome 6)
############### 4. alleles do not match those in the 1000 Genomes Project.
######## Select SNPs that reach GWAS significance
######## Standardization of the outcome data
######## SNP filtering for the outcome data
############### 1. with MAF<0.01, no need
############### 2. with effective sample size < 0.67 * 0.9 percentile
############### 3. within the major histocompatibility complex (MHC) region ( 26Mb \~ 34Mb on chromosome 6), no need
############### 4. alleles do not match those in the 1000 Genomes Project, no need
######## Match SNPs between biomarkers and the outcome by chr:loc ##################################
######## Calculate the correlation between summary statistics



load('~/mr/code/sumall.inflammation.RData')
### remove duplicated rows: udpated, no duplicates
#sumall = sumall[-which(duplicated(sumall$rsid)),]


#############################################################################################
######################## Data for the summary statistics of the outcome #####################
#############################################################################################
if (outcome == 'rhema')
{
  # Update: 04/11/2017
  # Create: 03/19/2017
  # Author: Yan (Dora) Zhang
  #
  # source:
  #   https://www.ibdgenetics.org/downloads.html
  #
  # notes:
  #   1. iibdgc-trans-ancestry-filtered-summary-stats.tgz folder contains files:
  #   EUR.CD.gwas_info03_filtered.assoc, EUR.IBD.gwas_info03_filtered.assoc, EUR.UC.gwas_info03_filtered.assoc
  # CD_trans_ethnic_association_summ_stats_b37.txt, IBD_trans_ethnic_association_summ_stats_b37.txt, UC_trans_ethnic_association_summ_stats_b37.txt
  # README
  #
  # According to the README file, These files are the summary association statistics corresponding to Liu, van Sommeren et al, Nature Genetics, 2015. There are two groups of files: (1) GWAS meta-analyses, and (2) GWAS plus Immunochip trans-ancestry MANTRA meta-analyses. Each group has outputs for rhema's disease (CD), ulcerative colitis (UC), and both inflammatory bowel diseases (IBD) together.

  # SE in the EUR.CD.gwas_info03_filtered.assoc  file is the SE of the log(OR), and the p-value is calculated based on the formula 2*pnorm(-abs(log(OR))/ SE(log(OR))).
  #
  # Disease                 N_total N_case  N_control
  # rhema                   20883   5956    14927
  # Ulcerative colitis      27432   6968    20464
  # Inflammatory Bowel      34652   12882   21770

  sumoutcometemp = read_delim(paste0(outcomedir,'RA_GWASmeta_European_v2_N.txt'),delim='\t')
  sumoutcometemp = as.data.frame(sumoutcometemp)
  # tem = read_delim(paste0(outcomedir,'GPC-2.rhemaTICISM.full_N.txt'),delim='\t')
  # tem = as.data.frame(tem)
  # tem = tem[,c('SNPID','A1','A2')]
  # colnames(tem)[1] = 'snp'
  # sumoutcometemp = sumoutcometemp %>% inner_join(tem, by = 'snp')

  # _N.txt:
  # SNPID	Chr	Position(hg19)	A1	A2	OR(A1)	OR_95%CIlow	OR_95%CIup	pvalue_raw	pvalue	z	beta_scale	sigMsq
  # rs3094315	1	752566	A	G	1.14	1.03	1.26	0.0093	0.0108228574562146	2.54836690974419	0.0244961759708397	9.24001490901232e-05
  # no - A1: REF; A2: ALT
  sumoutcometemp$SE = log(sumoutcometemp$`OR(A1)`)/sumoutcometemp$z
  sumoutcometemp = sumoutcometemp[,c('Chr','Position(hg19)','SNPID','A1','A2',
                                     'OR(A1)','SE','pvalue')]
  sumoutcometemp = sumoutcometemp[complete.cases(sumoutcometemp),]
  colnames(sumoutcometemp) = c('CHR','POS','SNP','A1','A2','beta','se','p')
  sumoutcometemp = sumoutcometemp[,c('SNP','A1','A2','beta','se','p')]
  #sumoutcometemp$beta = log(sumoutcometemp$beta)
  colnames(sumoutcometemp) = c("MarkerName","A1","A2","beta","se","P")
}

##### preprocess the outcome data
# Remove SNPs with sample size < 0.67 * (90 percentile)
if ('N' %in% colnames(sumoutcometemp)){
  sumoutcometemp = sumoutcometemp %>% filter(N>0.67*quantile(N,0.9))
}

#### standardization
sumoutcometemp[['beta']] = sumoutcometemp[['beta']]/sd.outcome
sumoutcometemp[['se']] = sumoutcometemp[['se']]/sd.outcome

if (outcome %in% c('rhema'))
{
  #### further process the outcome data:
  sumoutcome = sumoutcometemp[(sumoutcometemp$MarkerName %in% sumall$rsid),]
  sumoutcome$A1 = toupper(sumoutcome$A1)
  sumoutcome$A2 = toupper(sumoutcome$A2)
  colnames(sumoutcome)[which(colnames(sumoutcome) == 'MarkerName')] = 'rsid'
  sumoutcome = sumoutcome[,c('rsid', 'A1', 'A2', 'beta', 'se', 'P')]
  names(sumoutcome)[2:ncol(sumoutcome)] = paste0(names(sumoutcome)[2:ncol(sumoutcome)],'.',outcome)
  sumoutcome$rsid = as.character(sumoutcome$rsid)
  #### Merge data for biomarkers and the outcome: only keep the SNPs that are available for all traits
  sumall = sumall %>% inner_join(sumoutcome, by = 'rsid')
  sumall = sumall[complete.cases(sumall),]
}

write_delim(sumall,file='~/mr/code/sumdata.txt')


#### match A1 and A2 between biomarkers(A1,A2) and outcome(A1.outcome,A2.outcome)
## scenario 1: A1 A2 flipped between the biomarker and the outcome
inds.flipped = ((sumall[["A1"]] == sumall[[paste0('A2.',outcome)]])&(sumall[["A2"]] == sumall[[paste0('A1.',outcome)]]))
## match to biomarkers A1 A2
if (sum(inds.flipped) > 0)
{
  sumall[[paste0("beta.",outcome)]][inds.flipped] = -sumall[[paste0("beta.",outcome)]][inds.flipped]
  sumall[[paste0("A1.",outcome)]][inds.flipped] = sumall[['A1']][inds.flipped]
  sumall[[paste0("A2.",outcome)]][inds.flipped] = sumall[['A2']][inds.flipped]
}
## scenario 2: A1 A2 flipped between the biomarker and the outcome also modifiable strand-ambiguous:
alleles = cbind(sumall[["A1"]], sumall[["A2"]], sumall[[paste0('A1.',outcome)]], sumall[[paste0('A2.',outcome)]])
combine.alleles = function(x)
{
  paste(x,collapse='')
}
alleles = apply(alleles,1,combine.alleles)
inds.ambiguous= which(alleles %in% c('ACGT','AGCT','TCGA','TGCA','CATG','CTAG','GATC','GTAC'))
if (length(inds.ambiguous) > 0)
{
  sumall[[paste0("beta.",outcome)]][inds.ambiguous] = -sumall[[paste0("beta.",outcome)]][inds.ambiguous]
  sumall[[paste0("A1.",outcome)]][inds.ambiguous] = sumall[['A1']][inds.ambiguous]
  sumall[[paste0("A2.",outcome)]][inds.ambiguous] = sumall[['A2']][inds.ambiguous]
}
###### now decide which ones to keep
inds.ambiguous.keep = alleles %in% c('ACTG','AGTC','TCAG','TGAC','CAGT','CTGA','GACT','GTCA')
if (sum(inds.ambiguous.keep) > 0)
{
  sumall[[paste0("A1.",outcome)]][inds.ambiguous.keep] = sumall[['A1']][inds.ambiguous.keep]
  sumall[[paste0("A2.",outcome)]][inds.ambiguous.keep] = sumall[['A2']][inds.ambiguous.keep]
}
inds.match.keep = ((sumall[["A1"]] == sumall[[paste0('A1.',outcome)]])&(sumall[["A2"]] == sumall[[paste0('A2.',outcome)]]))
if (sum(inds.ambiguous.keep)>0)
{
  inds.keep = c(which(inds.ambiguous.keep),which(inds.match.keep))
}
if (sum(inds.ambiguous.keep)==0)
{
  inds.keep = which(inds.match.keep)
}
sumall = sumall[inds.keep,]

trait.spec = NULL
for (trait in c(traitvec,outcome)){
  trait.spec = c(trait.spec, paste0(c("beta.", "se.", "P."), trait))
}
sumall = sumall[,c("loc","rsid", "A1", "A2", trait.spec)] # Jin: no need to include "Chr" and "Pos"
sumall <- sumall %>%
  mutate(position = strsplit(loc, split = ':')) %>%
  mutate(Chr = as.integer(sapply(position, function(x) x[1])), Pos = as.integer(sapply(position, function(x) x[2])))
sumall = sumall[,c("loc","Chr","Pos","rsid", "A1", "A2", trait.spec)] # Jin: no need to include "Chr" and "Pos"
save(sumall, file='/dcl01/chatterj/data/jin/summary_data/sumall.infl.rhema.RData')



######### exclude the SNPs that are associated with the confounders: haven't done yet
# confoundtable = read.csv("code/confounderinfo.csv",header=T)
# #### redefine loc as chr:rsid and use it to exclude SNPs
# confoundtable$loc = paste0(confoundtable$Chr,confoundtable$SNP)
# sumall = sumall%>%
#   mutate(loc = paste0(Chr,rsid))
#
# sumall = sumall[!(sumall[['loc']] %in% confoundtable$loc),]
# -------------------- merge GWAS results for crp ---------------------
lm.dir = '/dcl01/chatterj/data/jin/UKB/GWAS/crp/genotype/lm-adj3/'
sumcrp = read_delim(paste0(lm.dir,'lm1.pheno.glm.linear'),delim='\t')
for (chr in 2:22)
{
  tem = read_delim(paste0(lm.dir,'lm',chr,'.pheno.glm.linear'),delim='\t')
  sumcrp = rbind(sumcrp,tem)
}
# `#CHROM`     POS ID      REF   ALT   TEST  OBS_CT     BETA     SE T_STAT     P
colnames(sumcrp) = c('Chr','Pos','rsid','A1','A2','test','obs_ct','beta.CRP','se.CRP','t','P.CRP')
sumcrp = sumcrp[,c('rsid','beta.CRP','se.CRP','P.CRP')]
load('/dcl01/chatterj/data/jin/summary_data/sumall.infl.rhema.RData')
sumall = sumall %>% inner_join(sumcrp, by = 'rsid')
sumall = sumall[complete.cases(sumall),] # 1033555
### do not remove SNPs associated with the confounders: o.w. there is no significant SNP left for CRP
#sumall = sumall[!(sumall[['rsid']] %in% conf.rsid),]

# ------- standardization
#sd.biomarkers = c(2.47,49.9,10.5,147,24.8,4.245)[1:K]
sumall$beta.CRP = sumall$beta.CRP/4.245
sumall$se.CRP = sumall$se.CRP/4.245
#for (i in 1:5)
#{
#  sumall[,paste0('beta.',traitvec[i])] =
#}
save(sumall,file=paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.infl-rhema-adj3.RData'))





### ------------------ IV selection
load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.infl-rhema-adj3.RData'))
traitvec = c('IL1','IL6','IL8','TNF','MCP1','CRP')
select.type = 'intersection'
p.clump = alpha = 1e-3
z = qnorm(p=alpha/2,lower.tail=FALSE)
p.crp = 5e-6 # (p.clump %in% c(1e-5,5e-5,1e-4)) * 5e-8 + (p.clump %in% c(5e-4,1e-3,2e-3)) * 5e-6
pc = p.clump
r2=0.05
kb=1024
if (select.type == 'union')
{
  ind1 = ifelse(sumall[[paste0('P.',traitvec[1])]] <= alpha, 1, 0)
  ind2 = ifelse(sumall[[paste0('P.',traitvec[2])]] <= alpha, 1, 0)
  ind3 = ifelse(sumall[[paste0('P.',traitvec[3])]] <= alpha, 1, 0)
  ind4 = ifelse(sumall[[paste0('P.',traitvec[4])]] <= alpha, 1, 0)
  ind5 = ifelse(sumall[[paste0('P.',traitvec[5])]] <= alpha, 1, 0)
  ind6 = ifelse(sumall[[paste0('P.CRP')]] <= p.crp, 1, 0)
  ind0 = ind1 + ind2 + ind3 + ind4 + ind5 + ind6
  sumall = sumall[ind0 >= 1,]
  save(sumall,file=paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
}
if (select.type == 'intersection')
{
  ind1 = ifelse(sumall[[paste0('P.',traitvec[1])]] <= alpha, 1, 0)
  ind2 = ifelse(sumall[[paste0('P.',traitvec[2])]] <= alpha, 1, 0)
  ind3 = ifelse(sumall[[paste0('P.',traitvec[3])]] <= alpha, 1, 0)
  ind4 = ifelse(sumall[[paste0('P.',traitvec[4])]] <= alpha, 1, 0)
  ind5 = ifelse(sumall[[paste0('P.',traitvec[5])]] <= alpha, 1, 0)
  ind6 = ifelse(sumall[[paste0('P.CRP')]] <= p.crp, 1, 0)
  ind0 = ind1 + ind2 + ind3 + ind4 + ind5 + ind6
  sumall = sumall[ind0 >= 2,]
  save(sumall,file=paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
}
conf.rsid = readRDS(paste0('~/mr/code/conf.rsid-7-adj2.rds'))
confounders = c('bmi','sbp','diabetes','smoking','alcohol','hdl','ldl')
conf.rsid = unlist(conf.rsid[c(1:7)])
sum(sumall[['rsid']] %in% conf.rsid)
### do not remove SNPs associated with the confounders: o.w. there is no significant SNP left for CRP
sumall = sumall[!(sumall[['rsid']] %in% conf.rsid),] # 373
save(sumall,file=paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))




K=6
exposure='inflammation'
outcome='rhema'
load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
chr.list = numeric()
for (chr in 1:22)
{
  sum.chrspecific = sumall[sumall[['Chr']] == chr,]
  if (nrow(sum.chrspecific) > 0)
  {
    chr.list = c(chr.list,chr)
    snpinfo <- make_bim(n = nrow(sum.chrspecific))
    # add the "chr" prefix to the chromosome values,
    # so we recognize them when we see them later.
    snpinfo$chr <- chr
    # Make SNP IDs look like "rs" IDs
    snpinfo$id <- sum.chrspecific[['rsid']]
    snpinfo$posg <- 0
    snpinfo$pos <- 0
    snpinfo$ref <- 0
    snpinfo$alt <- 0
    ### for kf: only delete this one SNP
    if (chr == 5)
    {
      snpinfo = snpinfo[-which(snpinfo$id == 'rs12186596'),]
    }
    snpinfo <- snpinfo[,c('chr','id','posg','pos','alt','ref')]

    write_bim(paste0("/dcl01/chatterj/data/jin/ldclump/data/snpinfo.",exposure,".",K,".",outcome,".",chr,".bim"),snpinfo)
    print(paste0("Writing .bim file for Chr ",chr))
  }
}

###### PLINK
###### Step 1: select SNPs that are present in 1000 Genome reference panel
mydir = '/dcl01/chatterj/data/jin/ldclump/'
refdir = '/dcl01/chatterj/data/diptavo/1KG/'
name<-"select_intersect"
for (chr in chr.list)
{
  filen<-paste0(mydir, "sh/", name, '_',exposure,'.',K,'.', outcome,".", chr, ".sh")
  file.create(filen)
  zz <- file(filen, "w")
  cat("#$ -cwd", "", file = zz, sep = "\n")
  cat(paste0('#$ -o ',mydir,'logfile'), file = zz, sep = "\n")
  cat(paste0('#$ -e ',mydir,'logfile'), file = zz, sep = "\n")
  cat(paste0('cd ',mydir), "\n", file=zz)
  cat("\n", file=zz)
  cmd1 <- paste(paste0('/dcl01/chatterj/data/tools/plink2 --bfile ',refdir,'1000G_bial_nochild'),
                paste0('--extract ',mydir,'data/snpinfo.',exposure,'.',K,'.',outcome,'.',chr,'.bim'),
                paste0('--keep ',refdir,'1000G_Europeans.txt'),
                paste0('--make-bed'),
                paste0('--out ',mydir,'data/1000G_intersect_snpinfo.',exposure,'.',K,'.',outcome,".",chr))
  system(cmd1)
}



setting1 = expand.grid(select.type = c('intersection'),alpha=c(1e-3))# 'union',
for (set1 in 1:nrow(setting1))
{
  select.type = setting1[set1,'select.type']
  p.clump = alpha = setting1[set1,'alpha']
  z = qnorm(p=alpha/2,lower.tail=FALSE)
  load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
  ################ take the union/intersection then clumping:
  ############ prepare the summary data as the input for LD Clumping:
  for (chr in 1:22)
  {
    sum.chrspecific = sumall[sumall[['Chr']] == chr,]
    temfile = paste0(mydir,'data/1000G_intersect_snpinfo.',exposure,".",K,'.',outcome,'.',chr,'.bim')
    if(file.exists(temfile))
    {
      sump <- read_delim(temfile, delim='\t',col_names = F)
      sump <- sum.chrspecific[(sum.chrspecific[['rsid']] %in% sump[[2]]),c("rsid",paste0('P.',traitvec))]
      if (select.type == 'union')
      {
        sum.p <- apply(sump[,paste0('P.',traitvec)], 1, min)
        sump <- cbind(sump$rsid,sum.p)
        colnames(sump) <- c('SNP','P')
      }
      if (select.type == 'intersection')
      {
        second.min = function(x)
        {
          sort(x,decreasing=F)[2]
        }
        sum.p <- apply(sump[,paste0('P.',traitvec)], 1, second.min)
        sump <- cbind(sump$rsid,sum.p)
        colnames(sump) <- c('SNP','P')
      }
      fwrite(sump,file=paste0('/dcl01/chatterj/data/jin/ldclump/data/snplist.',exposure,'.',K,'.',outcome,'.',select.type,'.',chr,'.rsid'),row.names = F, quote = F, sep=' ')
      print(chr)
    }
  }
  setting2 = expand.grid(r2=c(0.05),kb=c(1024)) #expand.grid(r2=c(0.01,0.02,0.05,0.1),kb=c(256,512,1024,2048))
  for (set2 in 1:nrow(setting2))
  {
    pc = p.clump
    r2 = setting2[set2,'r2']
    kb = setting2[set2,'kb']
    mydir = '/dcl01/chatterj/data/jin/ldclump/'
    refdir = '/dcl01/chatterj/data/diptavo/1KG/'
    name<-"ldclump"
    #--------------------- egfrcr & bun & egfrcys
    for (chr in c(1:22))
    {
      filen<-paste0(mydir, "sh/", name, '_',exposure,'.',K, '.', outcome,'.',select.type,'.', p.clump, '.', r2, '.', kb, '.', chr, ".sh")
      file.create(filen)
      zz <- file(filen, "w")
      cat("#$ -cwd", "", file = zz, sep = "\n")
      cat(paste0('#$ -o ',mydir,'logfile'), file = zz, sep = "\n")
      cat(paste0('#$ -e ',mydir,'logfile'), file = zz, sep = "\n")
      cat(paste0('cd ',mydir), "\n", file=zz)
      cat("\n", file=zz)
      cmd1 <- paste0('/dcl01/chatterj/data/jin/software/plink --bfile ',mydir,'data/1000G_intersect_snpinfo.',exposure,'.',K,'.',outcome,'.',chr,
                     ' --clump ',mydir,'data/snplist.',exposure,'.',K,'.',outcome,'.',select.type,'.',chr,'.rsid',
                     ' --clump-p1 ',pc,
                     ' --clump-p2 ',pc,
                     ' --clump-r2 ',r2,
                     ' --clump-kb ',kb,
                     ' --out ',mydir,'data/1000G_',exposure,'.',K,'.', outcome,'.',select.type,'.', p.clump,'.', r2, '.', kb, '.',chr)
      system(cmd1)
    }
  }
}



##### create clumped SNP list
setting1 = expand.grid(select.type = c('intersection'),alpha=c(1e-3))
for (set1 in 1:nrow(setting1))
{
  select.type = setting1[set1,'select.type']
  p.clump = alpha = setting1[set1,'alpha']
  z = qnorm(p=alpha/2,lower.tail=FALSE)
  #p.crp = (p.clump == 5e-5) * 5e-8 + (p.clump == 5e-4) * 5e-6
  p.crp = 5e-6 #(p.clump == 5e-5) * 5e-8 + (p.clump %in% c(5e-4,1e-3)) * 5e-6
  z.crp = qnorm(p=p.crp/2,lower.tail=FALSE)

  load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
  setting2 = expand.grid(r2=c(0.05),kb=c(1024)) # expand.grid(r2=c(0.01,0.02,0.05,0.1),kb=c(256,512,1024,2048))
  for (set2 in 1:nrow(setting2))
  {
    pc = p.clump
    r2 = setting2[set2,'r2']
    kb = setting2[set2,'kb']
    ############ read clumped snp info
    load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
    # no SNP significantly related to confounders

    chr = 1
    sumclumped = NULL
    temfile = paste0(mydir,'data/1000G_',exposure,'.',K,'.', outcome,'.',select.type,'.',p.clump,'.', r2, '.', kb, '.',chr,'.clumped')
    if(file.exists(temfile))
    {
      snp.clumped = read_delim(temfile,delim=' ',progress=F) # data.frame
      colnames(snp.clumped) = trimws(colnames(snp.clumped))
      snp.clumped = trimws(snp.clumped$SNP)
      sumclumped = sumall[((sumall$Chr == chr)&(sumall$rsid %in% snp.clumped)),]
    }
    for (chr in 2:22)
    {
      temfile = paste0(mydir,'data/1000G_',exposure,'.',K,'.', outcome,'.',select.type,'.',p.clump,'.', r2, '.', kb, '.',chr,'.clumped')
      if(file.exists(temfile))
      {
        temp = read_delim(temfile,delim=' ',progress=F) # data.frame
        colnames(temp) = trimws(colnames(temp))
        temp = trimws(temp$SNP)
        sumclumpedtemp = sumall[((sumall$Chr == chr)&(sumall$rsid %in% temp)),]
        sumclumped = rbind(sumclumped,sumclumpedtemp)
        print(paste0('Complete Chr ',chr))
      }
    }
    snp.clumped = sumclumped[['rsid']] # 124
    save(snp.clumped,file=paste0(mydir,'data/new/snp.clumped.',exposure, K, '_', outcome,'.',select.type,'.p1=',p.crp,'.p2=',p.clump,'.', r2, '.', kb, '.RData'))
  }
}


####################################################################################################
##################################### Step 1: Data Preprocessing ###################################
######## Merge: match SNPs between biomarkers using rsid; ##########################################
######## Standardization of the biomarker data (/se(trait)) ########################################
######## SNP filtering for biomarkers:
############### 1. with MAF<0.01
############### 2. with effective sample size < 0.67 * 0.9 percentile
############### 3. within the major histocompatibility complex (MHC) region ( 26Mb \~ 34Mb on chromosome 6)
############### 4. alleles do not match those in the 1000 Genomes Project.
######## Select SNPs that reach GWAS significance
######## Standardization of the outcome data
######## SNP filtering for the outcome data
############### 1. with MAF<0.01, no need
############### 2. with effective sample size < 0.67 * 0.9 percentile
############### 3. within the major histocompatibility complex (MHC) region ( 26Mb \~ 34Mb on chromosome 6), no need
############### 4. alleles do not match those in the 1000 Genomes Project, no need
######## Match SNPs between biomarkers and the outcome by chr:loc ##################################
######## Calculate the correlation between summary statistics
######## LD pruning/clumping
####################################################################################################
######## Merge files:
set1=set2=1
setting1 = expand.grid(select.type = c('intersection'),alpha=c(1e-3))
#for (set1 in 1:nrow(setting1))
#{
select.type = setting1[set1,'select.type']
p.clump = alpha = setting1[set1,'alpha']
z = qnorm(p=alpha/2,lower.tail=FALSE)
p.crp = 5e-6 # (p.clump == 5e-5) * 5e-8 + (p.clump == 5e-4) * 5e-6
z.crp = qnorm(p=p.crp/2,lower.tail=FALSE)

load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
setting2 = expand.grid(r2=c(0.05),kb=c(1024))
#for (set2 in 1:nrow(setting2))
#{
pc = p.clump
r2 = setting2[set2,'r2']
kb = setting2[set2,'kb']
############### data analysis
K=6
multiplebiom = T
if (multiplebiom == T) {methods = c(paste0('IVW.',traitvec),paste0('MRMix.',traitvec),'GMM')}
if (multiplebiom == F) {methods = c('IVW','MRMix','GMM')}
maf.thr = 0.01 #(default in function preprocess)
traitvec = c('IL1','IL6','IL8','TNF','MCP1','CRP')
exposure = 'inflammation'
outcome = 'rhema' #'ces'
sd.outcome = (outcome == 'sbp') * 19.3 + (outcome == 'dbp') * 10.5 + (outcome == 'ces') * 1 + (outcome == 'las') * 1 + (outcome == 'rhema') * 1
### IL6, IL16, TNF
N.biomarker = c(3309,8189,3526,3454,8293,134803)[1:K]
names(N.biomarker) = traitvec
sd.biomarkers = c(2.47,49.9,10.5,147,24.8,4.245)[1:K]
names(sd.biomarkers) = traitvec
thetak.sign = c(1,1,1,1,1,1)[1:K]

############ read clumped snp info
load(paste0('/dcl01/chatterj/data/jin/mr/sumdat/sumall.inflammation-rhema-adj3-',select.type,'-p1=',p.crp,'-p2=',p.clump,'.RData'))
#load(paste0(mydir,'data/new/snp.clumped.',exposure, K, '_', outcome,'.',select.type,'.p1=',p.crp,'.p2=',p.clump,'.', r2, '.', kb, '.RData'))
#load('/dcl01/chatterj/data/jin/ldclump/data/new/snp.clumped.inflammation6_cad.intersection.0.001.0.05.1024.RData')
load(paste0(mydir,'data/new/snp.clumped.',exposure, K, '_cad.',select.type,'.p1=',p.crp,'.p2=',p.clump,'.', r2, '.', kb, '.RData'))

sumall0=sumall
sumall = sumall[sumall[['rsid']] %in% snp.clumped,]
sumall = sumall[!(sumall[['rsid']] %in% conf.rsid),]

second.min = function(x)
{
  sort(x,decreasing=F)[2]
}
if (select.type == 'intersection')
{
  p.exposure = apply(sumall[,paste0('P.',traitvec)], 1, second.min)
}
if (select.type == 'union')
{
  p.exposure = apply(sumall[,paste0('P.',traitvec)], 1, min)
}
p.outcome = sumall[[paste0('P.',outcome)]]
# ------- remove the SNPs that have larger effect size for the outcome than for the exposure:
sumall = sumall[p.exposure<p.outcome,]    #132 -> 131


##################
##################
which.biomarkers = c(2,3,4,5,6)
traitvec0 = traitvec
traitvec = traitvec0[which.biomarkers]
K0=K
K=length(traitvec)
thetak.sign = thetak.sign[which.biomarkers]
multiplebiom = T
if (multiplebiom == T) {methods = c(paste0('IVW.',traitvec),paste0('MRMix.',traitvec),'GMM')}
if (multiplebiom == F) {methods = c('IVW','MRMix','GMM')}
######### Filtering: select the SNPs that reach genome-wide significance for Bks:
Bkind = list()
sign.level = ifelse(traitvec == 'CRP', p.crp, alpha)
for (i in 1:K)
{
  Bkind[[i]] = ifelse(sumall[[paste0('P.',traitvec[i])]]<= sign.level[i],1,0)
}
Bkinds = colSums(matrix(unlist(Bkind),K,nrow(sumall),byrow=T))
ivind = which(Bkinds > ifelse(select.type == 'union',0,1)) # index of the SNPs that are associated with at least one of the Bks
ivindk = lapply(1:K,FUN=function(x){which(Bkind[[x]]>0)}) # index of the SNPs that are associated with each Bk
sumtable = sumall[ivind,]

which.significant = which(sapply(1:K,function(x){length(ivindk[[x]])})>0)
traitvec = traitvec[which.significant]
K=length(traitvec)
thetak.sign = thetak.sign[which.significant]
multiplebiom = T
if (multiplebiom == T) {methods = c(paste0('IVW.',traitvec),paste0('MRMix.',traitvec),'GMM')}
if (multiplebiom == F) {methods = c('IVW','MRMix','GMM')}

##### may exclude some biomarkers:
trait.spec = NULL
for (trait in c(traitvec,outcome)){
  trait.spec = c(trait.spec, paste0(c("beta.", "se.", "P."), trait))
}
sumtable = sumtable[,c("Chr","Pos","rsid", "A1", "A2", trait.spec)]
##### load between-biomarker correlation: cor.mat
if (exposure == 'inflammation')
{
  load(paste0('code/cor.mat.inflammation6.RData'))
}
if (exposure == 'kf')
{
  load(paste0('code/cor.mat.',exposure,'.RData'))
}
#colnames(cor.mat) = rownames(cor.mat) = traitvec0
cov.mat = matrix(0,K+1,K+1)
cov.mat[2:(K+1),2:(K+1)] = cor.mat[traitvec,traitvec]
diag(cov.mat) = 1
cor.mat = cov.mat # redefine cor.mat by adding the correlation between biomarkers and the outcome
Cov.mat = list()
for (ni in 1:nrow(sumtable))
{
  beta.sd = diag(sapply(c(outcome,traitvec), function(x) {(sumtable[[paste0('se.',x)]][ni])}))
  Cov.mat[[ni]] = beta.sd %*% cor.mat %*% beta.sd
}
beta.sd = diag(sapply(c(outcome,traitvec), function(x) median(sumtable[[paste0('se.',x)]])))
c.mat = beta.sd %*% cor.mat %*% beta.sd
########## Data Analysis
### data for ivw analysis
Bkind = list()
ivw.ind = list()
sign.level = ifelse(traitvec == 'CRP', p.crp, alpha)
for (i in 1:K)
{
  Bkind[[i]] = ifelse(sumtable[[paste0('P.',traitvec[i])]]<= sign.level[i],1,0)
}
Bkinds = colSums(matrix(unlist(Bkind),K,nrow(sumtable),byrow=T))
ivind = which(Bkinds > ifelse(select.type == 'union',0,1)) # index of the SNPs that are associated with at least one of the Bks
ivindk = lapply(1:K,FUN=function(x){which(Bkind[[x]]>0)}) # index of the SNPs that are associated with each Bk
names(ivindk) = traitvec
sumtable0=sumtable


